{"ast":null,"code":"import { useReducer, useRef, useEffect } from 'react'; // Hook for gRPC queries\n\nexport const useGrpcRequest = (request, variables, initialData) => {\n  const [state, dispatch] = useReducer(requestReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData\n  });\n  const mounted = useRef(true);\n\n  const makeRequest = async newVariables => {\n    dispatch({\n      type: 'REQUEST_START'\n    });\n    const params = { ...variables,\n      ...newVariables\n    };\n\n    try {\n      const response = await request(params);\n      if (!mounted.current) return;\n      dispatch({\n        type: 'REQUEST_SUCCESS',\n        payload: response.toObject()\n      });\n    } catch (error) {\n      if (!mounted.current) return;\n      dispatch({\n        type: 'REQUEST_ERROR',\n        payload: error\n      });\n    }\n  };\n\n  useEffect(() => {\n    makeRequest();\n    return () => mounted.current = false;\n  }, []);\n  return [state.data, state.isError, state.isLoading, makeRequest];\n};\n\nconst requestReducer = (state, action) => {\n  switch (action.type) {\n    case 'REQUEST_START':\n      return { ...state,\n        isLoading: true\n      };\n\n    case 'REQUEST_SUCCESS':\n      return { ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload\n      };\n\n    case 'REQUEST_ERROR':\n      return { ...state,\n        isLoading: false,\n        isError: action.payload\n      };\n\n    default:\n      throw new Error();\n  }\n};","map":{"version":3,"sources":["/home/aditya/Projects/AttendanceSystem/app-frontend/src/useGrpcHook.js"],"names":["useReducer","useRef","useEffect","useGrpcRequest","request","variables","initialData","state","dispatch","requestReducer","isLoading","isError","data","mounted","makeRequest","newVariables","type","params","response","current","payload","toObject","error","action","Error"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,SAA7B,QAA8C,OAA9C,C,CAEA;;AACA,OAAO,MAAMC,cAAc,GAAG,CAACC,OAAD,EAAUC,SAAV,EAAqBC,WAArB,KAAqC;AACjE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,UAAU,CAACS,cAAD,EAAiB;AACnDC,IAAAA,SAAS,EAAE,KADwC;AAEnDC,IAAAA,OAAO,EAAE,KAF0C;AAGnDC,IAAAA,IAAI,EAAEN;AAH6C,GAAjB,CAApC;AAKA,QAAMO,OAAO,GAAGZ,MAAM,CAAC,IAAD,CAAtB;;AAEA,QAAMa,WAAW,GAAG,MAAMC,YAAN,IAAsB;AACxCP,IAAAA,QAAQ,CAAC;AAAEQ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AAEA,UAAMC,MAAM,GAAG,EACb,GAAGZ,SADU;AAEb,SAAGU;AAFU,KAAf;;AAKA,QAAI;AACF,YAAMG,QAAQ,GAAG,MAAMd,OAAO,CAACa,MAAD,CAA9B;AACA,UAAI,CAACJ,OAAO,CAACM,OAAb,EAAsB;AACtBX,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAE,iBAAR;AAA2BI,QAAAA,OAAO,EAAEF,QAAQ,CAACG,QAAT;AAApC,OAAD,CAAR;AACD,KAJD,CAIE,OAAOC,KAAP,EAAc;AACd,UAAI,CAACT,OAAO,CAACM,OAAb,EAAsB;AACtBX,MAAAA,QAAQ,CAAC;AAAEQ,QAAAA,IAAI,EAAE,eAAR;AAAyBI,QAAAA,OAAO,EAAEE;AAAlC,OAAD,CAAR;AACD;AACF,GAhBD;;AAkBApB,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,WAAW;AACX,WAAO,MAAOD,OAAO,CAACM,OAAR,GAAkB,KAAhC;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,SAAO,CAACZ,KAAK,CAACK,IAAP,EAAaL,KAAK,CAACI,OAAnB,EAA4BJ,KAAK,CAACG,SAAlC,EAA6CI,WAA7C,CAAP;AACD,CAhCM;;AAkCP,MAAML,cAAc,GAAG,CAACF,KAAD,EAAQgB,MAAR,KAAmB;AACxC,UAAQA,MAAM,CAACP,IAAf;AACE,SAAK,eAAL;AACE,aAAO,EACL,GAAGT,KADE;AAELG,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF,SAAK,iBAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELG,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,OAAO,EAAE,KAHJ;AAILC,QAAAA,IAAI,EAAEW,MAAM,CAACH;AAJR,OAAP;;AAMF,SAAK,eAAL;AACE,aAAO,EACL,GAAGb,KADE;AAELG,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,OAAO,EAAEY,MAAM,CAACH;AAHX,OAAP;;AAKF;AACE,YAAM,IAAII,KAAJ,EAAN;AApBJ;AAsBD,CAvBD","sourcesContent":["import { useReducer, useRef, useEffect } from 'react';\n\n// Hook for gRPC queries\nexport const useGrpcRequest = (request, variables, initialData) => {\n  const [state, dispatch] = useReducer(requestReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData,\n  });\n  const mounted = useRef(true);\n\n  const makeRequest = async newVariables => {\n    dispatch({ type: 'REQUEST_START' });\n\n    const params = {\n      ...variables,\n      ...newVariables,\n    };\n\n    try {\n      const response = await request(params);\n      if (!mounted.current) return;\n      dispatch({ type: 'REQUEST_SUCCESS', payload: response.toObject() });\n    } catch (error) {\n      if (!mounted.current) return;\n      dispatch({ type: 'REQUEST_ERROR', payload: error });\n    }\n  };\n\n  useEffect(() => {\n    makeRequest();\n    return () => (mounted.current = false);\n  }, []);\n\n  return [state.data, state.isError, state.isLoading, makeRequest];\n};\n\nconst requestReducer = (state, action) => {\n  switch (action.type) {\n    case 'REQUEST_START':\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case 'REQUEST_SUCCESS':\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload,\n      };\n    case 'REQUEST_ERROR':\n      return {\n        ...state,\n        isLoading: false,\n        isError: action.payload,\n      };\n    default:\n      throw new Error();\n  }\n};"]},"metadata":{},"sourceType":"module"}